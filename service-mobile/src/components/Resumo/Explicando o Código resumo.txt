Linha 1: Importamos o módulo React e sua classe Component, passo necessário para todo componente;

Linha 3: Criamos a classe com o mesmo nome do arquivo, herdando de Component;

Linha 4: Adicionamos o construtor do componente para que dentro dele possamos inicializar o seu estado;

Linha 5: Invocamos o construtor da classe pai;

Linhas 6 a 21: O state é um objeto interno de todo componente. Ele é usado para definir, como o nome sugere, o estado do componente. Para isso ele pode ter uma estrutura variável. Aqui definimos o state com uma estrutura igual àquela que será recebida do web service posteriormente isso facilitará a atualização desses dados mais adiante.

Linha 24: Todo componente do React deve possuir o método render, que é responsável por renderizá-lo;

Linha 32: Exportamos a classe criada, assim ela poderá ser importada posteriormente onde precisar ser usada.
----------------------------------

Linha 1: Essa é a declaração do método componentDidMount;

Linha 2: Efetuamos uma requisição GET ao endpoint /resumo do web service (o endereço da API foi encurtado aqui, mas deve estar completo no código);

Linha 3: Quando a requisição for finalizada o método then da linha anterior será acionado e então trataremos os dados recebidos como JSON, usando um método que também é assíncrono;

Linha 4: Obtemos os dados já em formato de objeto e atualizamos o state do componente. O método setState deve ser usado aqui, ao invés de atribuir um valor direto ao objeto this.state.


-----------------------------------------
Aqui temos um if ternário. Caso o valor da propriedade seja maior que zero, adicionaremos a classe badge-success. Caso contrário, teremos a classe badge-danger sendo adicionada.

---------------------------------------------

Podemos repetir esse procedimento nos demais componentes e, de fato, teremos reduzido a repetição de código e simplificado manutenções futuras que requeiram a alteração da URL.

No entanto, os componentes ainda estão responsáveis por fazer uma requisição HTTP a um web service e tratar os dados recebidos em formato JSON. Se esses dados precisassem de conversões ou procedimentos adicionais, isso teria de ser feito ali mesmo no método componentDidMount. Isso deixará o componente com muitas responsabilidades, o que de forma geral busca-se evitar na programação, a fim de manter os elementos o mais simples possível e facilitar sua manutenção.

Para solucionar esse problema podemos utilizar serviços, elementos intermediários que vão isolar essa lógica e oferecer aos componentes métodos com interface simplificada.